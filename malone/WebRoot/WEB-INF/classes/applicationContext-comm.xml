<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:p="http://www.springframework.org/schema/p" 
	   xmlns:mvc="http://www.springframework.org/schema/mvc" 
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop" 
	   xsi:schemaLocation="  
    http://www.springframework.org/schema/beans   
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
    http://www.springframework.org/schema/context  
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/mvc  
    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
    
	<!-- 引入jdbc.properties  
    <context:property-placeholder location="classpath*:jdbc.properties"/>-->
    <!-- 多个配置文件加载 -->
   	<bean id="propertyPlaceholderConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
	    <property name="locations">  
	        <list>  
	            <value>classpath*:jdbc.properties</value>
	        	<value>classpath*:memcache.properties</value> 
	        </list>  
	    </property>  
	</bean>
    <!-- kaptcha v2.3.2 -->
    <bean id="captchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">   
        <property name="config">  
            <bean class="com.google.code.kaptcha.util.Config">  
                <constructor-arg>  
                    <props>  
                        <prop key="kaptcha.border">no</prop>  
                        <prop key="kaptcha.border.color">105,179,90</prop>  
                        <prop key="kaptcha.textproducer.font.color">black</prop>  
                        <prop key="kaptcha.image.width">250</prop>  
                        <prop key="kaptcha.textproducer.font.size">70</prop>  
                        <prop key="kaptcha.image.height">90</prop>  
                        <prop key="kaptcha.session.key">KAPTCHA_SESSION_KEY</prop>
                        <prop key="kaptcha.obscurificator.impl">com.google.code.kaptcha.impl.WaterRipple</prop>
                        <prop key="kaptcha.textproducer.char.length">5</prop>  
                        <prop key="kaptcha.textproducer.font.names">宋体,楷体,微软雅黑</prop>  
                    </props>  
                </constructor-arg>  
            </bean>  
        </property>  
    </bean>
    
    <!-- 数据源  -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
    	<property name="driverClassName" value="${db-driver}" />
    	<property name="url" value="${db-url}" />
    	<property name="username" value="${db-username}" />
    	<property name="password" value="${db-password}" />
    	<property name="maxActive" value="20" />  
        <property name="initialSize" value="1" />
        <!-- 最大等待时间 单位毫秒 -->  
        <property name="maxWait" value="30000" />
        <!-- 最小连接池数量 -->
        <property name="minIdle" value="1" />
  		<!-- 1.Destroy线程会检测连接的间隔时间  2.testWhileIdle的判断依据，详细看testWhileIdle属性的说明-->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 连接保持空闲而不被驱逐的最长时间 --> 
        <property name="minEvictableIdleTimeMillis" value="300000" />  
  		<!-- 检查连接是否有效的sql -->
        <property name="validationQuery" value="SELECT 'x' FROM DUAL" />  
        <property name="testWhileIdle" value="true" />
        <!-- 申请连接时执行validationQuery检测连接是否有效 会降低性能 设置为false -->
        <property name="testOnBorrow" value="false" />
        <!-- 归还连接时执行validationQuery检测连接是否有效 会降低性能 设置为false -->
        <property name="testOnReturn" value="false" />
        <!-- 是否缓存preparedStatement，也就是PSCache mysql不支持-->  
        <property name="poolPreparedStatements" value="true" />
        <!-- 可以配置大点 比如100 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="50" />  
  
        <!-- 开启Druid的监控统计、日志、防御SQL注入功能 -->  
        <property name="filters" value="stat,wall" />  
    </bean>
    
    <!-- Mybatis SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
         <property name="configLocation" value="classpath:mybatis-config.xml"></property>
         <property name="dataSource" ref="dataSource" />
    </bean>
    
    <!-- 事务管理 -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>
    
    <!-- 字段扫描类注解 -->  
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="com.malone" />  
    </bean>
    
    <!-- 使用声明式 事务管理-->
    <tx:annotation-driven transaction-manager="txManager" />
    
    <!-- Memcached配置 -->  
    <bean id="memcachedPool" class="com.danga.MemCached.SockIOPool"  
        factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
        <property name="servers">
            <list>
                <value>${memcacheServer}</value>
            </list>
        </property>
        <property name="initConn">
            <value>${memcacheInitConn}</value>
        </property>
        <property name="minConn">
            <value>${memcacheMinConn}</value>
        </property>
        <property name="maxConn">
            <value>${memcacheMaxConn}</value>
        </property>
        <property name="maintSleep">
            <value>${memcacheMaintSleep}</value>
        </property>
        <property name="nagle">
            <value>${memcacheNagle}</value>
        </property>
        <property name="socketTO">
            <value>${memcacheSocketTO}</value>
        </property>
    </bean>
    <!-- memcached客户端操作对象 -->
    <bean id="memcachedClient" class="com.danga.MemCached.MemCachedClient"></bean>
    <!-- druid spring监控配置 -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"></bean>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
	    <property name="patterns">
	        <list>
	            <value>com.malone.sys.service.*</value>
	            <value>com.malone.web.*.service.*</value>
	        </list>
	    </property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
</beans>